-- Create the E-commerce Database
CREATE DATABASE ecommerce_db;
USE ecommerce_db;

-- Users Table
CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    phone VARCHAR(15),
    address TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Categories Table
CREATE TABLE categories (
    category_id INT AUTO_INCREMENT PRIMARY KEY,
    category_name VARCHAR(100) UNIQUE NOT NULL
);

-- Products Table
CREATE TABLE products (
    product_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    price DECIMAL(10,2) NOT NULL,
    stock_quantity INT NOT NULL DEFAULT 0,
    category_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (category_id) REFERENCES categories(category_id) ON DELETE SET NULL
);

-- Orders Table
CREATE TABLE orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    total_price DECIMAL(10,2) NOT NULL,
    status ENUM('Pending', 'Shipped', 'Delivered', 'Cancelled') DEFAULT 'Pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- Order Details Table (to handle multiple products per order)
CREATE TABLE order_details (
    order_detail_id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES products(product_id) ON DELETE CASCADE
);

-- Payments Table
CREATE TABLE payments (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    payment_method ENUM('Credit Card', 'PayPal', 'Bank Transfer') NOT NULL,
    payment_status ENUM('Pending', 'Completed', 'Failed') DEFAULT 'Pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE
);

-- Insert Sample Data
INSERT INTO users (name, email, password, phone, address) VALUES 
('John Doe', 'john@example.com', 'hashed_password', '1234567890', '123 Main St, City, Country'),
('Jane Smith', 'jane@example.com', 'hashed_password', '0987654321', '456 Another St, City, Country');

INSERT INTO categories (category_name) VALUES 
('Electronics'), ('Clothing'), ('Books');

INSERT INTO products (name, description, price, stock_quantity, category_id) VALUES 
('Smartphone', 'Latest model smartphone with 128GB storage', 599.99, 50, 1),
('Laptop', 'High-performance laptop with 16GB RAM', 1299.99, 30, 1),
('T-Shirt', 'Cotton t-shirt available in various sizes', 19.99, 100, 2),
('Novel', 'Bestselling fiction novel', 9.99, 200, 3);

INSERT INTO orders (user_id, total_price, status) VALUES 
(1, 619.98, 'Pending'),
(2, 29.98, 'Shipped');

INSERT INTO order_details (order_id, product_id, quantity, price) VALUES 
(1, 1, 1, 599.99),
(1, 3, 1, 19.99),
(2, 4, 3, 9.99);

INSERT INTO payments (order_id, amount, payment_method, payment_status) VALUES 
(1, 619.98, 'Credit Card', 'Completed'),
(2, 29.98, 'PayPal', 'Completed');

-- Queries to Test the Database
SELECT * FROM users;
SELECT * FROM orders;
SELECT * FROM products WHERE stock_quantity > 0;
SELECT o.order_id, u.name, o.total_price, o.status 
FROM orders o 
JOIN users u ON o.user_id = u.user_id;
